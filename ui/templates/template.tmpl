{{template "headerpart" .}}
<!-- Left Column -->
<div class="col-sm-4">
	<!-- Template Information Panel -->
	<div class="panel panel-default panel-custom" id="templates_panel">
		<!-- Template Information Panel Title -->
		<div class="panel-heading">
			<h1 class="panel-title">
				<span class="glyphicon glyphicon-file"></span> Templates
			</h1>
		</div><!-- /Template Information Panel Title -->
		<!-- Template Information Panel Body -->
		<div class="panel-body">
			<!-- Template Selection -->
			<div class="input-group text-left">
				<select class="form-control" id="templates"></select>
				<span class="input-group-btn">
					<button class="btn btn-default" id="edit_template_btn" type="button">
						<span class="glyphicon glyphicon-edit"></span>
					</button>
					<button class="btn btn-default" id="new_template_btn" type="button">
						<span class="glyphicon glyphicon-plus"></span>
					</button>
					<button class="btn btn-default" id="delete_template_btn" type="button">
						<span class="glyphicon glyphicon-minus"></span>
					</button>
				</span>
			</div><!-- /Template Selection -->
			<br>
			<!-- Template Properties -->
			<table class="table">
				<tr>
					<th width="50%">
						<span class="glyphicon glyphicon-file"></span> Property
					</th>
					<th width="50%">
						<span class="glyphicon glyphicon-pencil"></span> Value
					</th>
				</tr>
				<tr>
					<td>Template Name</td>
					<td>
						<span id="template_name"></span>
					</td>
				</tr>
			</table><!-- /Template Properties -->
			<!-- TemplatePersistentParameter-Destination Panel -->
			<div class="panel panel-default">
				<div class="panel-heading">
					<h1 class="panel-title">
						<span class="glyphicon glyphicon-list-alt"></span> TemplatePersistentParameter
					</h1>
				</div>
				<div class="panel-body">
					<div class="pre-scrollable" id="template_template_persistent_parameters"></div>
				</div>
			</div><!-- /TemplatePersistentParameter-Destination Panel -->
		</div><!-- /Template Information Panel Body -->
	</div><!-- /Template Information Panel -->
</div><!--/Left Column-->
<!-- Right Column -->
<div class="col-sm-8">
	<!-- Template Edit Panel -->
	<div class="panel panel-default panel-custom" id="edit_panel">
		<!-- Edit-Template Panel -->
		<div class="panel-heading">
			<h3 class="panel-title">
				<span class="glyphicon glyphicon-edit"></span>
				<span id="register_or_update_template_panel_title"></span>
			</h3>
		</div>
		<div class="panel-body">
			<table class="table">
				<tr>
					<th width="15%">
						<span class="glyphicon glyphicon-file"></span> Property
					</th>
					<th width="85%">
						<span class="glyphicon glyphicon-pencil"></span> Value
					</th>
				</tr>
				<tr>
					<td width="15%">Name</td>
					<td width="85%">
						<input type="hidden" id="edit_template_id">
						<input id="edit_template_name" type="text" name="edit_template_name" placeholder="template name like terraform" class="form-control">
					</td>
				</tr>
				<tr>
					<td colspan=2>Template Content</td>
				</tr>
				<tr>
					<td colspan=2>
						<textarea id="edit_template_template_content" name="edit_template_template_content" class="form-control" rows="15"></textarea>
					</td>
				</tr>
			</table>
			<!-- TemplatePersistentParameter Panel -->
			<div class="panel panel-default">
				<div class="panel-heading">
					<h1 class="panel-title">
						<span class="glyphicon glyphicon-list-alt"></span> TemplatePersistentParameter
					</h1>
				</div>
				<div class="panel-body">
					<table class="table table-condensed table-striped" id="edit_template_persistent_parameters_table">
						<thead>
							<tr>
								<th>&nbsp;</th>
								<th>Name</th>
								<th>Value</th>
							</tr>
						</thead>
						<tbody></tbody>
					</table>
				</div>
				<div style="margin-left:10px;margin-bottom:10px;">
					<span class="input-group-btn">
						<button id="edit_delete_template_persistent_parameter_btn" type="button" class="btn btn-default">
							<span class="glyphicon glyphicon-minus"></span>
						</button>
						<button id="edit_add_template_persistent_parameter_btn" type="button" class="btn btn-default">
							<span class="glyphicon glyphicon-plus"></span>
						</button>
						<button id="register_or_update_template_btn" type="button" class="btn btn-default">
							<span class="glyphicon glyphicon-ok"></span>
						</button>
						<button id="cancel_register_or_update_template_btn" type="button" class="btn btn-default">
							<span class="glyphicon glyphicon-remove"></span>
						</button>
						<button id="generate_template_btn" type="button" class="btn btn-default">
							<span class="glyphicon glyphicon-download-alt"></span>
						</button>
					</span>
				</div>
			</div><!-- /TemplatePersistentParameter-Destination Panel -->
		</div>
	</div><!-- /Edit-Template Panel -->
</div><!--/Right Column-->

<script language="javascript">
(function($) {

	{{template "functions".}}

	var templates = null;
	var templateMap = null;
	var templatePersistentParameters = null;
	var templatePersistentParameterMap = null;
	var editingTemplate = null;
	var editTemplatePersistentParametersTable = null;
	var editMode = null;

	function createTemplateModel(id, name) {
		var templateModel = {
			id: id,
			name: name,
			template_content: '',
			template_persistent_parameters: []
		};
		return templateModel;
	}

	function createTemplatePersistentParameterModel(id, name, value) {
		var templatePersistentParameterModel = {
			id: id,
			name: name,
			value: value
		};
		return templatePersistentParameterModel;
	}

	function createTemplateModelFromPanel() {
		var editTemplateID = $('#edit_template_id').val();
		var editTemplateName = $('#edit_template_name').val();
		var editTemplateTemplateContent = $('#edit_template_template_content').val();
		var result = {
			id: parseInt(editTemplateID),
			name: editTemplateName,
			template_content: editTemplateTemplateContent,
			template_persistent_parameters: createTemplatePersistentParameterModelFromPanel(editTemplateID)
		}
		return result;
	}

	function createTemplatePersistentParameterModelFromPanel(editTemplateID) {
		var result = [];
		var rows = editTemplatePersistentParametersTable.fnGetNodes();
		var rowCount = rows.length;
		for (var i = 0; i < rowCount; i = i + 1) {
			var row = rows[i];
			var editTemplatePersistentParameterID = $(row).find('input[name=edit_template_persistent_parameter_id]').val();
			var editTemplatePersistentParameterName = $(row).find('input[name=edit_template_persistent_parameter_name]').val();
			var editTemplatePersistentParameterValue = $(row).find('input[name=edit_template_persistent_parameter_value]').val();
			var editTemplatePersistentParameterModel = {
				id: parseInt(editTemplatePersistentParameterID),
				template_id: parseInt(editTemplateID),
				name: editTemplatePersistentParameterName,
				value_string: {
					String: editTemplatePersistentParameterValue,
					Valid: true
				}
			};
			result.push(editTemplatePersistentParameterModel);
		}
		return result;
	}

	function getDeletedTemplatePersistentParameterMap() {
		var deletedTemplatePersistentParameterMap = {};
		var editingTemplateTemplatePersistentParameters = editingTemplate.template_persistent_parameters;
		for (var i = 0; i < editingTemplateTemplatePersistentParameters.length; i = i + 1) {
			editingTemplateTemplatePersistentParameter = editingTemplateTemplatePersistentParameters[i];
			deletedTemplatePersistentParameterMap[editingTemplateTemplatePersistentParameter.id] = editingTemplateTemplatePersistentParameter;
		}
		var rows = editTemplatePersistentParametersTable.fnGetNodes();
		var rowCount = rows.length;
		for (var i = 0; i < rowCount; i = i + 1) {
			var row = rows[i];
			var deletedTemplatePersistentParameterId = parseInt($(row).find('input[name=edit_template_persistent_parameter_id]').val(), 0);
			delete(deletedTemplatePersistentParameterMap[deletedTemplatePersistentParameterId]);
		}
		return deletedTemplatePersistentParameterMap;
	}

	function showTemplate(initializeTemplateSelection) {
		if (initializeTemplateSelection) {
			$('#templates').children().remove();
			for (var i = 0; i < templates.length; i = i + 1) {
				$('#templates').append($('<option>').val(templates[i].id).text(templates[i].name));
			}
		}
		$('#template_name').text('');
		$('#template_content').text('');
		$('#template_template_persistent_parameters').children().remove();

		var template = templateMap[$('#templates').val()];
		if (template != null) {
			$('#template_name').append(template.name);
			$('#template_content').append(template.content);

			for (var i = 0; i < template.template_persistent_parameters.length; i = i + 1) {
				var templatePersistentParameter = templatePersistentParameterMap[template.template_persistent_parameters[i].id];
				var templateTemplatePersistentParametersTable = $('<div>').append(
					$('<table>').prop('class', 'table table-bordered').append(
						$('<tr>').append(
							$('<table>').prop('class', 'table table-condensed table-striped').append(
								$('<tr>').append(
									$('<th>').append(
										'Name'
									)
								)
							).append(
								$('<tr>').append(
									$('<td>').append(
										templatePersistentParameter.name
									)
								)
							).append(
								$('<tr>').append(
									$('<th>').append(
										'Value'
									)
								)
							).append(
								$('<tr>').append(
									$('<td>').append(
										templatePersistentParameter.value_string.String
									)
								)
							)
						)
					)
				).append(
					$('<hr>')
				);
				$('#template_template_persistent_parameters').append(templateTemplatePersistentParametersTable);
			}
		}
	}

	function loadResources() {
		templates = getResources('templates', 'preloads=TemplatePersistentParameters').resources;
		templateMap = buildResouceMapFromResourceArray(templates);
		for (var i = 0; i < templates.length; i = i + 1) {
			var template = templates[i];
			if (template.template_persistent_parameters == null) {
				template.template_persistent_parameters = [];
			}
		}
		templatePersistentParameters = getResources('template_persistent_parameters', '').resources;
		templatePersistentParameterMap = buildResouceMapFromResourceArray(templatePersistentParameters);
	}

	function onLoad() {
		$.fn.dataTable.ext.order['dom-text'] = function(settings, col) {
			return this.api().column(col, {
				order: 'index'
			}).nodes().map(function(td, i) {
				return $('input', td).val();
			});
		}
		editTemplatePersistentParametersTable = $('#edit_template_persistent_parameters_table').dataTable({
			scrollX: true,
			scrollY: 120,
			searching: false,
			columns: [
				null,
				{
					orderDataType: 'dom-text',
					type: 'string'
				},
				{
					orderDataType: 'dom-text',
					type: 'string'
				},
			]
		});

		loadResources();
		$('#templates_panel').fadeIn(150);
		showTemplate(true);
	}

	function onTemplateChanged() {
		showTemplate(false);
	}

	function onEditTemplate() {
		if ($('#templates').val() == null) {
			alert('Add a template first.');
			return;
		}

		$('#edit_panel').fadeOut(150, function() {
			// Set edit mode to Update
			editMode = 'Update';
			$('#register_or_update_template_panel_title').children().remove();
			$('#register_or_update_template_panel_title').append($('<span>').text('Template update'));

			// Save the editing template
			editingTemplate = templateMap[$('#templates').val()];

			// Initialize Template properties
			$('#edit_template_id').val(editingTemplate.id);
			$('#edit_template_name').val(editingTemplate.name);
			$('#edit_template_template_content').val(editingTemplate.template_content);

			// Initialize TemplatePersistentParameters properties
			var rows = editTemplatePersistentParametersTable.fnGetNodes();
			var rowCount = rows.length;
			for (var i = rowCount - 1; 0 <= i; i = i - 1) {
				editTemplatePersistentParametersTable.fnDeleteRow(i, null, false);
			}

			for (var i = 0; i < editingTemplate.template_persistent_parameters.length; i = i + 1) {
				var templatePersistentParameter = templatePersistentParameterMap[editingTemplate.template_persistent_parameters[i].id];

				editTemplatePersistentParametersTable.fnAddData([
					createCheckboxElement('edit_template_persistent_parameter_check', 'transform:scale(1.5);position:relative;top:7px;').outerHTML + createHiddenElement('edit_template_persistent_parameter_id', templatePersistentParameter.id).outerHTML,
					createTextElement('edit_template_persistent_parameter_name', 'width:200px', 'name like dpid', templatePersistentParameter.name).outerHTML,
					createTextElement('edit_template_persistent_parameter_value', 'width:540px', 'value like 0xdad1c001', templatePersistentParameter.value_string.String).outerHTML,
				]);
			}

			$('#generate_template_btn').prop('disabled', false);

			$('#edit_panel').fadeIn(150, function() {
				editTemplatePersistentParametersTable.fnDraw(true);
			});
		});
	}

	function onNewTemplate() {
		$('#edit_panel').fadeOut(150, function() {
			// Set edit mode to Update
			editMode = 'Register';
			$('#register_or_update_template_panel_title').children().remove();
			$('#register_or_update_template_panel_title').append($('<span>').text('Template registration'));

			// Clear the editing template
			editingTemplate = createTemplateModel(null, '', 1, false, '', false, '');

			// Initialize Template properties
			$('#edit_template_id').val('');
			$('#edit_template_name').val('');
			$('#edit_template_template_content').val('');

			// Clear TemplatePersistentParameters properties
			var rows = editTemplatePersistentParametersTable.fnGetNodes();
			var rowCount = rows.length;
			for (var i = rowCount - 1; 0 <= i; i = i - 1) {
				editTemplatePersistentParametersTable.fnDeleteRow(i, null, false);
			}

			$('#generate_template_btn').prop('disabled', true);

			$('#edit_panel').fadeIn(150, function() {
				editTemplatePersistentParametersTable.fnDraw(true);
			});
		});
	}

	function onAddTemplatePersistentParameter() {
		editTemplatePersistentParametersTable.fnAddData([
			createCheckboxElement('edit_template_persistent_parameter_check', 'transform:scale(1.5);position:relative;top:7px;').outerHTML + createHiddenElement('edit_template_persistent_parameter_id', 0).outerHTML,
			createTextElement('edit_template_persistent_parameter_name', 'width:200px', 'name like dpid', '').outerHTML,
			createTextElement('edit_template_persistent_parameter_value', 'width:540px', 'value like 0xdad1c001', '').outerHTML,
		]);
		editTemplatePersistentParametersTable.fnDraw();
	}

	function onDeleteTemplatePersistentParameter() {
		var rows = editTemplatePersistentParametersTable.fnGetNodes();
		var rowCount = rows.length;

		var selectedRowCount = 0;
		for (var i = 0; i < rowCount; i = i + 1) {
			var row = rows[i];
			if ($(row).find('input[name=edit_template_persistent_parameter_check]').prop('checked')) {
				selectedRowCount = selectedRowCount + 1;
			}
		}

		if (selectedRowCount == 0) {
			alert('Check the templates what you want to delete first');
			return;
		}

		if (!confirm('Are you sure to delete selected parameters?')) {
			return;
		}

		for (var i = rowCount - 1; 0 <= i; i = i - 1) {
			var row = rows[i];
			if ($(row).find('input[name=edit_template_persistent_parameter_check]').prop('checked')) {
				editTemplatePersistentParametersTable.fnDeleteRow(row, null, false);
			}
		}
		editTemplatePersistentParametersTable.fnDraw();
	}

	function onRegisterOrUpdateTemplate() {
		if (editMode == 'Register') {
			if (!confirm('Are you sure to register?')) {
				return;
			}
		}
		else {
			if (!confirm('Are you sure to update?')) {
				return;
			}
		}

		var templatePersistentParameterMapForDeletion = getDeletedTemplatePersistentParameterMap();
		var templateForRegistrationOrUpdate = createTemplateModelFromPanel();

		for (key in templatePersistentParameterMapForDeletion) {
			var result = deleteResource('template_persistent_parameters', key);
			if (!showProcessResult(result, 204, null, true, onTemplateModified)) {
				return;
			}
		}

		if (editMode == 'Register') {
			var result = postResource('templates', templateForRegistrationOrUpdate);
			showProcessResult(result, 201, 'The template has been registered successfully', false, onTemplateModified);
		}
		else {
			var result = putResource('templates', templateForRegistrationOrUpdate.id, templateForRegistrationOrUpdate);
			showProcessResult(result, 200, 'The template has been updated successfully', false, onTemplateModified);
		}
	}

	function onDeleteTemplate() {
		if ($('#templates').val() == null) {
			alert('Add a template first.');
			return;
		}

		if (!confirm('Are you sure to delete?')) {
			return;
		}

		var templateId = $('#templates').val();

		var result = deleteResource('templates', templateId);
		showProcessResult(result, 204, 'The template has been deleted successfully', false, onTemplateModified);
	}

	function onGenerateTemplate() {
		if (!confirm('Are you sure to update and generate from this template?')) {
			return;
		}

		var templatePersistentParameterMapForDeletion = getDeletedTemplatePersistentParameterMap();
		var templateForRegistrationOrUpdate = createTemplateModelFromPanel();

		for (key in templatePersistentParameterMapForDeletion) {
			var result = deleteResource('template_persistent_parameters', key);
			if (!showProcessResult(result, 204, null, true, onTemplateModified)) {
				return;
			}
		}

		var result = putResource('templates', templateForRegistrationOrUpdate.id, templateForRegistrationOrUpdate);
		if (!showProcessResult(result, 200, 'The template has been updated successfully', true, onTemplateModified)) {
			return;
		}

		result = getResourceAsText('templates/' + templateForRegistrationOrUpdate.id, 'generation', '');
		if (result.status != 200) {
			result.resource = $.parseJSON(result.resource);
		}
		if (!showProcessResult(result, 200, null, true, onTemplateModified)) {
			return;
		}

		var content = result.resource;
		var link = document.createElement('a');
		link.href = window.URL.createObjectURL(new Blob([content]));
		link.download = 'generated.txt';
		link.click();

		showProcessResult(result, 200, 'The template has been updated and generated successfully', false, onTemplateModified);
	}

	function onCancelRegisterOrUpdateTemplate() {
		if (!confirm('Are you sure to cancel?')) {
			return;
		}

		$('html,body').animate({scrollTop: 0}, 'slow');
		$('#edit_panel').fadeOut(150);
	}

	function onTemplateModified() {
		$('#edit_panel').fadeOut(150);
		loadResources();
		showTemplate(true);
	}

	$('#templates').on('change', function() {
		onTemplateChanged();
	});

	$('#edit_template_btn').on('click', function() {
		onEditTemplate();
	});

	$('#new_template_btn').on('click', function() {
		onNewTemplate();
	});

	$('#edit_add_template_persistent_parameter_btn').on('click', function() {
		onAddTemplatePersistentParameter();
	});

	$('#edit_delete_template_persistent_parameter_btn').on('click', function() {
		onDeleteTemplatePersistentParameter();
	});

	$('#register_or_update_template_btn').on('click', function() {
		onRegisterOrUpdateTemplate();
	});

	$('#delete_template_btn').on('click', function() {
		onDeleteTemplate();
	});

	$('#generate_template_btn').on('click', function() {
		onGenerateTemplate();
	});

	$('#cancel_register_or_update_template_btn').on('click', function() {
		onCancelRegisterOrUpdateTemplate();
	});

	onLoad();

})(jQuery);
</script>
{{template "footerpart" .}}
