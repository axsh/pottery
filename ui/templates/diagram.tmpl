{{template "headerpart" .}}
<div class="panel panel-default panel-custom" id="diagram_panel">
	<div class="panel-heading">
		<h1 class="panel-title">
			<span class="glyphicon glyphicon-th-large"></span>
			<span id="diagram_title"></span>
		</h1>
	</div>
	<div class="panel-body">
		<div id="diagram_canvas"></div>
	</div>
</div>

<div class="context-menu">
	<ul class="diagram-menu">
	</ul>
</div>

<script language="javascript">
	(function($) {

		{{template "functions" .}}

		var diagramType = getUrlVars()['diagram_type'];
		var diagramProperties = {
			physical: {
				title: 'Physical Diagram',
				distance: function(force) {
					force.jaccardLinkLengths(70, 0.2);
				}
			},
			logical: {
				title: 'Logical Diagram',
				distance: function(force) {
					force.jaccardLinkLengths(150, 0.2);
				}
			}
		};

		var menuItems = {
			diagram: [
				{ label: "Add physical node", url: "url", icon: "glyphicon-plus" },
				{ label: "Add virtual node",  url: "url", icon: "glyphicon-plus" },
                      //        { label: null, url: null },
                      //        { label: "Add new test case", url: "url" }
			],
			node: [
				{ label: "Edit node", url: "url", icon: "glyphicon-edit" }
			]
		};

		function showMenu(menuElement, posX, posY) {
			menuElement.css({left: posX, top: posY - 40});
			menuElement.show();
		}

		function hideMenu(menuElement) {
			menuElement.hide();
		}

		// recursive check because the "text" field of the node is one lever deeper in the xml tree and will not respond to the event otherwise
		function getContextOfTarget (target, targetValue) {
			if(target.nodeName == "svg") {
				return false;
			}
			if(target.className.baseVal.split(" ").indexOf(targetValue) > -1) {
				return { type: targetValue, meta: target.__data__ };
			}
			return getContextOfTarget(target.parentNode, targetValue);
		}

		function createContextMenu(diagramElement, meta) {
			for(var idx in menuItems[diagramElement]) {
				item = menuItems[diagramElement][idx];

				if(item["label"] == "divider") {
					$('.diagram-menu').append('<li class="divider"></li>');
				} else {

					$('.diagram-menu').append(
						$('<li>').append(
							$('<a>').prop('href', item["url"]).append(
								$('<span>').prop('class', 'glyphicon ' + item["icon"] +'')
							).append(item["label"])
						)
					);
				}
			}
		}

		function onUpdateContextMenu() {
			d3.select('#diagram').on("contextmenu", function(data) {
				var menuElement = $('.diagram-menu');
				menuElement.empty();

				d3.event.preventDefault();
				var x = d3.event.pageX;
				var y = d3.event.pageY;
				var context = getContextOfTarget(d3.event.target, "node") || { type: "diagram", meta: null }
				console.log(context["meta"]);
				createContextMenu(context["type"], context["meta"]);

				showMenu($('.context-menu'), x, y)
			});
		}

		$("body").on("click", function(event) {
			hideMenu($('.context-menu'));
		});

		function onUpdateNetworkDiagram() {
			$('#diagram_panel').fadeOut(150, function() {
				$('#diagram_title').text(diagramProperties[diagramType].title);
				$('#diagram_canvas').children().remove();
				$('#diagram_canvas').append($('<div>').prop('id', 'diagram'));
				$('#diagram_panel').fadeIn(150, function() {
					var diagramInstance = new Diagram('#diagram', API_PREFIX + '/diagrams/' + diagramType, {
						pop: /^([^\s-]+)-/,
						distance: diagramProperties[diagramType].distance,
						width: $('#diagram_canvas').width(),
						height: 900
					});
					diagramInstance.init('interface');
				});
			});
		}

		function onLoad() {
			onUpdateNetworkDiagram();
			onUpdateContextMenu();
		}

		var timer = false;
		$(window).resize(function() {
		    if (timer !== false) {
		        clearTimeout(timer);
		    }
		    timer = setTimeout(function() {
		        onUpdateNetworkDiagram();
		    }, 200);
		});

		onLoad();

	})(jQuery);
</script>
{{template "footerpart" .}}
