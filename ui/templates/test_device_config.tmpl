{{template "headerpart" .}}

<div class="col-sm-12">
	<div class="panel panel-default panel-custom" id="test_node_configuration_panel">
		<div class="panel-heading">
			<h1 class="panel-title">
				<span class="glyphicon glyphicon-wrench"></span> Test Device Configuration
			</h1>
		</div>
		<div class="panel-body">
			<div class="col-sm-4">
				<div class="panel panel-default" id="edit_test_node_panel">
					<div class="panel-heading">
						<h1 class="panel-title"><span class="glyphicon glyphicon-transfer"></span> Devices </h1>
					</div>
					<div class="panel-body">
						<table class="table" style="border:none;">
							<tr style="border:none;">
								<td style="border:none;" width="25%">Device</td>
								<td style="border:none;" width="75%"><select class="form-control" id="nodes"></select></td>
							</tr>
							<tr style="border:none;">
								<td style="border:none;"></td>
								<td style="border:none;"><span style="float: right"><button class="btn btn-default" id="edit_test_node_configuration_btn" type="button"><span class="glyphicon glyphicon-edit"></span> Edit Configuration</button></span></td>
							</tr>
						</table>
					</div>
				</div>
			</div>
			<div class="col-sm-8">
				<div class="panel panel-default panel-custom" id="edit_test_node_configuration_panel">
					<div class="panel-heading">
						<h1 class="panel-title"><span class="glyphicon glyphicon-file"></span> Configurations</h1>
					</div>
					<div class="panel-body">
						<div id="edit_test_node_configuration_panel">
							<div class="row">
							  <div class="col-xs-12">
							    Initialization
							  </div>
							</div>
							<div class="row">
							  <div class="col-xs-12">
							    <textarea id="edit_test_node_configuration_initial" name="edit_test_node_configuration_initial" rows="10" class="form-control"></textarea>
							  </div>
							</div>
							<div class="row">
							  <div class="col-xs-12">
							    <hr>
							  </div>
							</div>
							<div class="row">
							  <div class="col-xs-12">
							    Configuration
							  </div>
							</div>
							<div class="row">
							  <div class="col-xs-12">
							    <textarea id="edit_test_node_configuration_setup" name="edit_test_node_configuration_setup" rows="10" class="form-control"></textarea>
							  </div>
							</div>
							<div class="row">
							  <div class="col-xs-12">
							    &nbsp;
							  </div>
							</div>
						</div>
						<span style="float: left"><button class="btn btn-default" id="update_test_node_configuration_btn" type="button"><span class="glyphicon glyphicon-ok"></span> Update</button></span>
						<span style="float: left">&nbsp;</span>
						<span style="float: left"><button class="btn btn-default" id="cancel_update_test_node_configuration_btn" type="button"><span class="glyphicon glyphicon-remove"></span> Cancel</button></span>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<script language="javascript">
	(function($) {

		{{template "functions" .}}

		var nodes = null;
		var nodeMap = null;
		var nodeExtraAttributeFields = null;
		var nodeExtraAttributeFieldMap = null;
		var nodeExtraAttributeFieldMapByName = null;

		var editingNode = null;

		function buildMapByName(source) {
			var result = {};
			for (key in source) {
				result[source[key].name] = source[key];
			}
			return result;
		}

		function buildNodeExtraAttributeMapByName(nodeExtraAttributes) {
			var nodeExtraAttributeMapByName = {
				virtual: {
					node_extra_attribute_field_id: nodeExtraAttributeFieldMapByName['virtual'].id,
					value_bool: {
						Valid: true,
						Bool: false,
					}
				},
				device_initialization_config: {
					node_extra_attribute_field_id: nodeExtraAttributeFieldMapByName['device_initialization_config'].id,
					value_string: {
						Valid: true,
						Int64: '',
					}
				},
				device_config: {
					node_extra_attribute_field_id: nodeExtraAttributeFieldMapByName['device_config'].id,
					value_string: {
						Valid: true,
						String: '',
					}
				},
			};
			for (var i = 0; i < nodeExtraAttributes.length; i = i + 1) {
				var nodeExtraAttribute = nodeExtraAttributes[i];
				var nodeExtraAttributeField = nodeExtraAttributeFieldMap[nodeExtraAttribute.node_extra_attribute_field_id];
				nodeExtraAttributeMapByName[nodeExtraAttributeField.name] = nodeExtraAttribute;
			}
			return nodeExtraAttributeMapByName;
		}

		function loadResources() {
			nodeExtraAttributeFields = getResources('node_extra_attribute_fields', '').resources;
			nodeExtraAttributeFieldMap = buildResouceMapFromResourceArray(nodeExtraAttributeFields);
			nodeExtraAttributeFieldMapByName = buildMapByName(nodeExtraAttributeFieldMap);
			nodes = [];
			var nodeExtraAttributes = getResources('node_extra_attributes', 'q\[node_extra_attribute_field_id\]=' + nodeExtraAttributeFieldMapByName['virtual'].id + '&q\[value_bool\]=0&preloads=Node,Node.NodeExtraAttributes').resources;
			for (var i = 0; i < nodeExtraAttributes.length; i = i + 1) {
				var node = nodeExtraAttributes[i].node;
				node.node_extra_attribute_map_by_name = buildNodeExtraAttributeMapByName(node.node_extra_attributes);
				nodes.push(node);
			}
			nodeMap = buildResouceMapFromResourceArray(nodes);
		}

		function createSelectElement(name, style, options, value) {
			var select =  $('<select>').prop('name', name).prop('class', 'form-control').prop('style', style);
			var editSelectOptionsElement = createSelectOptionsElement(options);
			for (var i = 0; i < editSelectOptionsElement.length; i = i + 1) {
				if ((value == null) && (i == 0)) {
						select.append(editSelectOptionsElement[i].attr('selected', 'selected'));
				} else {
					if (value == editSelectOptionsElement[i].val()) {
						select.append(editSelectOptionsElement[i].attr('selected', 'selected'));
					} else {
						select.append(editSelectOptionsElement[i]);
					}
				}
			}
			return select[0];
		}

		function createSelectOptionsElement(options) {
			var result = [];
			for (var i = 0; i < options.length; i = i + 1) {
				result.push($('<option>').val(options[i].value).text(options[i].text));
			}
			return result;
		}

		function showNodes() {
			$("#nodes").children().remove();
			for (var i = 0; i < nodes.length; i = i + 1) {
				var node = nodes[i]
				$("#nodes").append($('<option>').val(node.id).text(node.name));
			}
		}

		function onEditNodeConfiguration() {
			if ($('#nodes').val() == null) {
				alert('Add a physical node first.');
				return;
			}

			editingNode = nodeMap[$('#nodes').val()];

			$('#edit_test_node_configuration_panel').fadeOut(150, function() {
				$('#edit_test_node_configuration_initial').val(editingNode.node_extra_attribute_map_by_name['device_initialization_config'].value_string.String);
				$('#edit_test_node_configuration_setup').val(editingNode.node_extra_attribute_map_by_name['device_config'].value_string.String);
				$('#edit_test_node_configuration_panel').fadeIn(150, function() {
				});
			});
		}

		function onNodeConfigurationModified(result, successCode, successMessage, ignoreSuccess) {
			if (result.status == successCode) {
				if (!ignoreSuccess) {
					$('html,body').animate({
						scrollTop: 0
					}, 'slow');
					$('#information_message').text(successMessage);
					$('#alert_info').fadeIn(500).delay(2000).fadeOut(1000);
					$('#edit_test_node_configuration_panel').fadeOut(150);
					loadResources();
					showNodes();
				}
				return true;
			}
			else {
				$('html,body').animate({
					scrollTop: 0
				}, 'slow');
				$('#error_message').text(result.resource.error);
				$('#alert_error').fadeIn(500).delay(2000).fadeOut(1000);
				return false;
			}
		}

		function onUpdateNodeConfiguration() {
			if (!confirm('Are you sure to update?')) {
				return;
			}

			var deviceInitializationConfig = editingNode.node_extra_attribute_map_by_name['device_initialization_config'];
			var deviceConfig = editingNode.node_extra_attribute_map_by_name['device_config'];

			deviceInitializationConfig.node_id = editingNode.id;
			deviceInitializationConfig.value_string.Valid = true;
			deviceInitializationConfig.value_string.String = 	$('#edit_test_node_configuration_initial').val();
			if (deviceInitializationConfig.id == null) {
				var result = postResource('node_extra_attributes', deviceInitializationConfig);
				if (!onNodeConfigurationModified(result, 201, '', true)) {
					return;
				}
			} else {
				var result = putResource('node_extra_attributes', deviceInitializationConfig.id, deviceInitializationConfig);
				if (!onNodeConfigurationModified(result, 200, '', true)) {
					return;
				}
			}

			deviceConfig.node_id = editingNode.id;
			deviceConfig.value_string.Valid = true;
			deviceConfig.value_string.String = 	$('#edit_test_node_configuration_setup').val();
			if (deviceConfig.id == null) {
				var result = postResource('node_extra_attributes', deviceConfig);
				onNodeConfigurationModified(result, 201, 'The device configuration has been updated successfully', false);
			} else {
				var result = putResource('node_extra_attributes', deviceConfig.id, deviceConfig);
				onNodeConfigurationModified(result, 200, 'The device configuration has been updated successfully', false);
			}
		}

		function onCancelUpdateNodeConfiguration() {
			if (!confirm('Are you sure to cancel?')) {
				return;
			}

			$('html,body').animate({scrollTop:0},'slow');
			$('#edit_test_node_configuration_panel').fadeOut(150);
		}

		$('#edit_test_node_configuration_btn').on('click', function() {
			onEditNodeConfiguration();
		});

		function onLoad() {
			loadResources();
			$('#test_node_configuration_panel').fadeIn(150);
			showNodes();
		}

		$('#update_test_node_configuration_btn').on('click', function() {
			onUpdateNodeConfiguration();
		});

		$('#cancel_update_test_node_configuration_btn').on('click', function() {
			onCancelUpdateNodeConfiguration();
		});

		onLoad();

	})(jQuery);
</script>
{{template "footerpart" .}}
